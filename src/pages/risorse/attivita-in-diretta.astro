---
import Hero from '~/components/widgets/Hero.astro';
import Layout from '../../layouts/PageLayout.astro';
import { parse } from 'csv-parse/browser/esm'; // Use browser-compatible version if this runs in the browser
import assert from 'assert';

import banner from '~/assets/images/codymaze/banner.jpg';

const metadata = {
  title: 'Attivit√† in diretta',
  tagline: 'Risorse',
};

type Row = {
  data: string; // CSV columns are case-sensitive by default
  nome: string; // Keep strings since CSV data is read as text
  descrizione: string;
  url_video: string;
  nome_immagine: string;
  metodo: string;
  target: string;
};

let rows: Row[] = [];

const spreadsheetUrl =
  'https://docs.google.com/spreadsheets/d/e/2PACX-1vTcSleBVCqdjUx2ZI95NrW5jU4LIlSJp-F3YWD-BJ0t9utjvMzkila7eCXJMgUl9PMWQDrrzcK6i19r/pub?output=csv';

async function fetchData(): Promise<Row[]> {
  try {
    const response = await fetch(spreadsheetUrl);
    if (!response.ok) {
      console.error('Failed to fetch spreadsheet data');
      return [];
    }
    const csvData = await response.text();
    console.log(csvData);

    return new Promise((resolve, reject) => {
      parse(
        csvData,
        {
          delimiter: ',',
          columns: true, // Converts rows to objects based on the header row
        },
        (err, records: Row[]) => {
          if (err) {
            console.error('Error parsing CSV data:', err);
            reject(err);
          } else {
            resolve(records);
          }
        }
      );
    });
  } catch (error) {
    console.error('Error fetching data:', error);
    return [];
  }
}

rows = await fetchData();
---

<Layout metadata={metadata}>
  <Hero tagline={metadata.tagline} title={metadata.title}>
    <Fragment slot="subtitle"> </Fragment>
  </Hero>

  <section>
    <h2>Data from Spreadsheet</h2>
    {
      rows.length > 0 ? (
        <table>
          <thead>
            <tr>
              {Object.keys(rows[0]).map((header) => (
                <th>{header}</th>
              ))}
            </tr>
          </thead>
          <tbody>
            {rows.map((row) => (
              <tr>
                {Object.values(row).map((value) => (
                  <td>{value}</td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      ) : (
        <p>Loading data...</p>
      )
    }
  </section>
</Layout>
