---
import { Icon } from 'astro-icon/components';
import { UI } from 'astrowind:config';
import Logo from '~/components/Logo.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import Button from '~/components/ui/Button.astro';

import { getHomePermalink } from '~/utils/permalinks';
import { trimSlash, getAsset } from '~/utils/permalinks';
import type { CallToAction } from '~/types';
import MobileMenu from './MobileMenu.tsx';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
  target?: any;
}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
  target?: any;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<CallToAction>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = 'header',
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = 'center',
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;

const props = Astro.props;
---

<style>
  a,
  li {
    text-decoration: none;
    color: rgba(0, 0, 0, 0.788);
  }
  a:hover {
    text-decoration: none;
    color: rgb(0, 0, 0);
  }
</style>
<header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    'top-0 z-40 flex-none mx-auto w-full border-b border-gray-50/0 transition-[opacity] ease-in-out bg-white/80 dark:bg-[#030620]/80',
  ]}
  {...isSticky ? { 'data-aw-sticky-header': true } : {}}
  {...id ? { id } : {}}
>
  <script is:inline>
    window.onload = () => {
      const theme = getThemeFromLocalStorage();
      console.log('Current theme:', theme);
    };
  </script>
  <div class="absolute inset-0"></div>
  <div
    class:list={[
      'relative text-default py-3 px-3 lg:px-6 mx-auto w-full',
      {
        'lg:flex lg:justify-between': position !== 'center',
      },
      {
        'lg:grid lg:grid-cols-3 lg:items-center': position === 'center',
      },
      {
        'max-w-7xl': !isFullWidth,
      },
    ]}
  >
    <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'flex justify-between']}>
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>

      <div class="flex items-center lg:hidden overflow-y-auto overflow-x-hidden">
        <ToggleMenu />
      </div>
    </div>

    <!-- Mobile Menu -->
    <nav class="hidden mt-11 w-full items-start text-default" aria-label="Mobile navigation">
      <MobileMenu links={links} currentPath={''} client:load />
    </nav>

    <!-- Desktop Menu -->
    <nav
      class="hidden lg:flex items-center w-full lg:w-auto lg:mx-5 text-default overflow-y-auto overflow-x-hidden lg:overflow-y-visible lg:overflow-x-auto lg:justify-self-center"
      aria-label="Desktop navigation"
    >
      <ul
        class="flex flex-col lg:flex-row lg:self-center w-full lg:w-auto text-xl lg:text-[0.9375rem] tracking-[0.01rem] font-medium lg:justify-center"
      >
        {
          links.map(({ text, href, links, target }) => (
            <li class={links?.length ? 'dropdown' : ''}>
              {links?.length ? (
                <>
                  <button
                    type="button"
                    class="hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap"
                  >
                    {text}{' '}
                    <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden lg:inline" />
                  </button>
                  <ul class="dropdown-menu lg:backdrop-blur-lg dark:lg:bg-dark rounded lg:absolute pl-4 lg:pl-0 lg:hidden font-medium lg:bg-white/90 lg:min-w-[200px] drop-shadow-xl">
                    {links.map(({ text: text2, href: href2, links: links2, target = '' }) => (
                      <li class={links2?.length ? 'dropdown2' : ''}>
                        {links2 && links2.length ? (
                          <div class="relative">
                            <button
                              type="button"
                              class="hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap"
                            >
                              {text2}{' '}
                              <Icon
                                name="tabler:chevron-right"
                                class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden lg:inline"
                              />
                            </button>

                            <ul class="dropdown2-menu lg:backdrop-blur-lg dark:lg:bg-dark rounded lg:absolute top-0 left-32 pl-4 lg:pl-0 lg:hidden font-medium lg:bg-white lg:min-w-[200px] drop-shadow-xl">
                              {links2.map(({ text: text3, href: href3, target = '' }) => (
                                <li>
                                  <a
                                    class:list={[
                                      'first:rounded-t last:rounded-b lg:hover:bg-gray-200 hover:text-link dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 block whitespace-no-wrap',
                                      { 'aw-link-active': href3 === currentPath },
                                    ]}
                                    href={href3}
                                    target={target}
                                  >
                                    {text3}
                                  </a>
                                </li>
                              ))}
                            </ul>
                          </div>
                        ) : (
                          <a
                            class:list={[
                              'flex gap-2 first:rounded-t last:rounded-b lg:hover:bg-gray-200 hover:text-link dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 whitespace-no-wrap items-center',
                              { 'aw-link-active': href2 === currentPath },
                            ]}
                            href={href2}
                            target={target}
                          >
                            {text2}{' '}
                            {target !== '' && (
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                width="1em"
                                height="1em"
                                viewBox="0 0 24 24"
                                {...props}
                              >
                                <path
                                  fill="currentColor"
                                  d="M19 19H5V5h7V3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14c1.1 0 2-.9 2-2v-7h-2zM14 3v2h3.59l-9.83 9.83l1.41 1.41L19 6.41V10h2V3z"
                                />
                              </svg>
                            )}
                          </a>
                        )}
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={[
                    'hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap gap-2',
                    { 'aw-link-active': href === currentPath },
                  ]}
                  href={href}
                  target={target}
                >
                  {text}
                  {target && (
                    <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" {...props}>
                      <path
                        fill="currentColor"
                        d="M19 19H5V5h7V3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14c1.1 0 2-.9 2-2v-7h-2zM14 3v2h3.59l-9.83 9.83l1.41 1.41L19 6.41V10h2V3z"
                      />
                    </svg>
                  )}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>

    <!-- <nav
      class="items-center w-full lg:w-auto hidden lg:flex lg:mx-5 text-default overflow-y-auto overflow-x-hidden lg:overflow-y-visible lg:overflow-x-auto lg:justify-self-center"
      aria-label="Main navigation"
    >
      <ul
        class="flex flex-col lg:flex-row lg:self-center w-full lg:w-auto text-xl lg:text-[0.9375rem] tracking-[0.01rem] font-medium lg:justify-center"
      >
        {
          links.map(({ text, href, links, target }) => (
            <li class={links?.length ? 'dropdown' : ''}>
              {links?.length ? (
                <>
                  <button
                    type="button"
                    class="hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap"
                  >
                    {text}{' '}
                    <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden lg:inline" />
                  </button>
                  <ul class="dropdown-menu lg:backdrop-blur-lg dark:lg:bg-dark rounded lg:absolute pl-4 lg:pl-0 lg:hidden font-medium lg:bg-white/90 lg:min-w-[200px] drop-shadow-xl">
                    {links.map(({ text: text2, href: href2, links: links2, target = '' }) => (
                      <li class={links2?.length ? 'dropdown2' : ''}>
                        {links2 && links2.length ? (
                          <div class="relative">
                            <button
                              type="button"
                              class="hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap"
                            >
                              {text2}{' '}
                              <Icon
                                name="tabler:chevron-right"
                                class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden lg:inline"
                              />
                            </button>

                            <ul class="dropdown2-menu lg:backdrop-blur-lg dark:lg:bg-dark rounded lg:absolute top-0 left-32 pl-4 lg:pl-0 lg:hidden font-medium lg:bg-white lg:min-w-[200px] drop-shadow-xl">
                              {links2.map(({ text: text3, href: href3, target = '' }) => (
                                <li>
                                  <a
                                    class:list={[
                                      'first:rounded-t last:rounded-b lg:hover:bg-gray-200 hover:text-link dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 block whitespace-no-wrap',
                                      { 'aw-link-active': href3 === currentPath },
                                    ]}
                                    href={href3}
                                    target={target}
                                  >
                                    {text3}
                                  </a>
                                </li>
                              ))}
                            </ul>
                          </div>
                        ) : (
                          <a
                            class:list={[
                              'flex gap-2 first:rounded-t last:rounded-b lg:hover:bg-gray-200 hover:text-link dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 whitespace-no-wrap items-center',
                              { 'aw-link-active': href2 === currentPath },
                            ]}
                            href={href2}
                            target={target}
                          >
                            {text2}{' '}
                            {target !== '' && (
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                width="1em"
                                height="1em"
                                viewBox="0 0 24 24"
                                {...props}
                              >
                                <path
                                  fill="currentColor"
                                  d="M19 19H5V5h7V3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14c1.1 0 2-.9 2-2v-7h-2zM14 3v2h3.59l-9.83 9.83l1.41 1.41L19 6.41V10h2V3z"
                                />
                              </svg>
                            )}
                          </a>
                        )}
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={[
                    'hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap gap-2',
                    { 'aw-link-active': href === currentPath },
                  ]}
                  href={href}
                  target={target}
                >
                  {text}
                  {target && (
                    <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" {...props}>
                      <path
                        fill="currentColor"
                        d="M19 19H5V5h7V3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14c1.1 0 2-.9 2-2v-7h-2zM14 3v2h3.59l-9.83 9.83l1.41 1.41L19 6.41V10h2V3z"
                      />
                    </svg>
                  )}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav> -->
    <!-- theme dark and white -->
    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'hidden lg:self-center lg:flex items-center lg:mb-0 fixed w-full lg:w-auto lg:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 lg:p-0 lg:justify-self-end',
      ]}
    >
      <div class="items-center flex justify-between w-full lg:w-auto">
        <div class="flex">
          {
            showToggleTheme && (
              <ToggleTheme
                iconClass="w-6 h-6 lg:w-5 lg:h-5 lg:inline-block"
                iconName={isDark ? 'tabler:sun' : 'tabler:moon'}
              />
            )
          }
          {
            showRssFeed && (
              <a
                class="text-muted dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 inline-flex items-center"
                aria-label="RSS Feed"
                href={getAsset('/rss.xml')}
              >
                <Icon name="tabler:rss" class="w-5 h-5" />
              </a>
            )
          }
        </div>
        {
          actions?.length ? (
            <span class="ml-4 rtl:ml-0 rtl:mr-4">
              {actions.map((btnProps) => (
                <Button {...btnProps} class="ml-2 py-2.5 px-5.5 lg:px-6 font-semibold shadow-none text-sm w-auto" />
              ))}
            </span>
          ) : (
            ''
          )
        }
      </div>
    </div>
  </div>
</header>
